package main

import (
	"encoding/json"
	"fmt"
	"net/http"
	"strconv"
)

type CalculationRequest struct {
	First    string `json:"first"`
	Operator string `json:"operator"`
	Second   string `json:"second"`
}

type CalculationResponse struct {
	Result string `json:"result"`
	Error  string `json:"error,omitempty"`
}

func main() {
	http.Handle("/", http.FileServer(http.Dir("./static")))

	http.HandleFunc("/calculate", func(w http.ResponseWriter, r *http.Request) {
		if r.Method != http.MethodPost {
			http.Error(w, "Only POST allowed", http.StatusMethodNotAllowed)
			return
		}

		var req CalculationRequest
		err := json.NewDecoder(r.Body).Decode(&req)
		if err != nil {
			http.Error(w, "Invalid JSON", http.StatusBadRequest)
			return
		}

		firstNumber, err1 := strconv.ParseFloat(req.First, 64)
		secondNumber, err2 := strconv.ParseFloat(req.Second, 64)

		if err1 != nil || err2 != nil {
			json.NewEncoder(w).Encode(CalculationResponse{Error: "Invalid number"})
			return
		}

		var result float64
		switch req.Operator {
		case "+":
			result = firstNumber + secondNumber
		case "-":
			result = firstNumber - secondNumber
		case "*":
			result = firstNumber * secondNumber
		case "/":
			if secondNumber == 0 {
				json.NewEncoder(w).Encode(CalculationResponse{Error: "Division by zero"})
				return
			}
			result = firstNumber / secondNumber
		default:
			json.NewEncoder(w).Encode(CalculationResponse{Error: "Invalid operator"})
			return
		}

		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(CalculationResponse{Result: fmt.Sprintf("%.2f", result)})
	})
	http.ListenAndServe(":http://127.0.0.1:5500/", nil)
}
